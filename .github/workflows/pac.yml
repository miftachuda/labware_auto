name: build exe
on:
  workflow_dispatch:

jobs:
  pack:
    name: bundling & packing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.18.0
      - name: 'Install Dependencies'
        run: npm install
      - name: 'Bundling with esbuild'
        run: npx esbuild index.js --bundle --platform=node --external:./xhr-sync-worker.js --external:canvas --outfile=dist/index.js
      - name: 'Packaging with pkg'
        run: npx pkg --compress GZip -t node14-win dist/index.js
      - name: 'Get Previous tag'
        id: previoustag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          fallback: 1.0.0
      - name: 'Check if Tag Exists'
        id: check_tag_exists
        run: |
        TAG_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.previoustag.outputs.tag }}" \
          | jq -r '.message')
          if [[ "$TAG_EXISTS" == "Not Found" ]]; then
            echo "Tag doesn't exist. Proceeding with release."
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
          else
          echo "Tag already exists. Creating a new version."
          # Extract the major, minor, and patch numbers, and increment the patch version
          VERSION=${{ steps.previoustag.outputs.tag }}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        fi
      - name: 'Get next version'
        id: monoversion
        uses: "WyriHaximus/github-action-next-release-version@1.0.0"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: 'Release'
        if: env.TAG_EXISTS == 'false'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: false
          prerelease: false
          tag_name: ${{ steps.previoustag.outputs.tag }}
          release_name: Release ${{ steps.previoustag.outputs.tag }}
      - name: 'Release (with new tag)'
        if: env.TAG_EXISTS == 'true'
        uses: actions/create-release@v1
        id: create_release_new_tag
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: false
          prerelease: false
          tag_name: ${{ env.NEW_TAG }}
          release_name: Release ${{ env.NEW_TAG }}
      - name: 'Rename the output file'
        run: mv ./index.exe ./something.exe
      - name: 'Upload Release'
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ github.token }}
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./something.exe
            asset_name: something.exe
            asset_content_type: application/exe
